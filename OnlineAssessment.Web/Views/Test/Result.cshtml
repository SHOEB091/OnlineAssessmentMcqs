@model OnlineAssessment.Web.Models.TestResult

@{
    ViewData["Title"] = "Test Result";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h2 class="mb-0">Test Result</h2>
                    <div>
                        <button onclick="exportResult()" class="btn btn-light me-2">
                            <i class="fas fa-download"></i> Export Result
                        </button>
                        <a href="/Test/History" class="btn btn-light">
                            <i class="fas fa-history"></i> View History
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card h-100 border-0 bg-light">
                                <div class="card-body">
                                    <h4 class="text-primary mb-4">Test Details</h4>
                                    <div class="mb-3">
                                        <i class="fas fa-book me-2"></i>
                                        <strong>Test:</strong> @Model.Test.Title
                                    </div>
                                    <div class="mb-3">
                                        <i class="fas fa-user me-2"></i>
                                        <strong>Submitted by:</strong> @Model.Username
                                    </div>
                                    <div class="mb-3">
                                        <i class="fas fa-clock me-2"></i>
                                        <strong>Submitted at:</strong> @Model.SubmittedAt.ToString("g")
                                    </div>
                                    <div class="mb-3">
                                        <i class="fas fa-question-circle me-2"></i>
                                        <strong>Total Questions:</strong> @Model.TotalQuestions
                                    </div>
                                    <div class="mb-3">
                                        <i class="fas fa-check-circle me-2"></i>
                                        <strong>Correct Answers:</strong> @Model.CorrectAnswers
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card h-100 border-0 bg-light">
                                <div class="card-body text-center">
                                    <h4 class="text-primary mb-4">MCQ Score</h4>
                                    <div class="score-circle mx-auto mb-4 @(Model.Score >= 70 ? "border-success" : "border-danger")">
                                        <div>
                                            <h1 class="display-2 mb-0">@Model.Score.ToString("0")</h1>
                                            <p class="mb-0">out of 100</p>
                                        </div>
                                    </div>
                                    <div class="mt-3">
                                        <span class="badge @(Model.Score >= 70 ? "bg-success" : "bg-danger") p-3 fs-5">
                                            @(Model.Score >= 70 ? "PASSED" : "FAILED")
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="text-center mt-4">
                        <a href="/Test/Index" class="btn btn-primary btn-lg">
                            <i class="fas fa-arrow-left me-2"></i>Back to Tests
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .score-circle {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border-width: 10px;
        border-style: solid;
        background-color: white;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .border-success {
        border-color: #28a745;
    }

    .border-danger {
        border-color: #dc3545;
    }

    .badge {
        font-size: 1.1em;
        padding: 0.5em 1.5em;
        border-radius: 30px;
    }

    .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 15px;
        transition: transform 0.2s ease;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .bg-light {
        background-color: #f8f9fa !important;
    }
</style>

@section Scripts {
    <script>
        function exportResult() {
            const resultData = {
                testTitle: '@Model.Test.Title',
                username: '@Model.Username',
                submittedAt: '@Model.SubmittedAt.ToString("g")',
                totalQuestions: @Model.TotalQuestions,
                correctAnswers: @Model.CorrectAnswers,
                score: @Model.Score
            };

            const jsonString = JSON.stringify(resultData, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `test_result_${resultData.testTitle.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        }
    </script>
} 