@model List<OnlineAssessment.Web.Models.Test>
@using OnlineAssessment.Web.Models
@{
    ViewData["Title"] = "Tests";
    var isAdmin = ViewBag.IsAdmin ?? false;
    var username = ViewBag.Username ?? "Guest";
    var isAuthenticated = User.Identity?.IsAuthenticated ?? false;
    var userRole = User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
    var hasActiveSubscription = ViewBag.HasActiveSubscription ?? false;
    var canCreateMcq = ViewBag.CanCreateMcq ?? false;
    var canCreateCoding = ViewBag.CanCreateCoding ?? false;
}

<div class="container mt-5">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">Welcome, @username!</h2>
                @if (isAuthenticated && (isAdmin || userRole == "Organization"))
                {
                    <a href="/Test/Create" class="btn btn-primary">
                        <i class="fas fa-plus-circle me-2"></i>Create New Test
                    </a>
                }
            </div>
        </div>
    </div>

    @if (!isAuthenticated)
    {
        <div class="alert alert-info shadow-sm">
            <i class="fas fa-info-circle me-2"></i>
            Please <a href="/Auth/Login" class="alert-link">login</a> to take tests or create new ones.
        </div>
    }

    @if (userRole == "Organization" && !hasActiveSubscription)
    {
        <div class="alert alert-warning shadow-sm">
            <i class="fas fa-exclamation-triangle me-2"></i>
            You need an active subscription to create tests. 
            <a href="/Pricing" class="alert-link">View pricing plans</a>
        </div>
    }

    <div class="row">
        @if (Model.Any())
        {
            foreach (var test in Model)
            {
                <div class="col-md-6 col-lg-4 mb-4" data-test-id="@test.Id">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header bg-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0 text-truncate" title="@test.Title">@test.Title</h5>
                                <span class="badge bg-@(test.Type == TestType.MultipleChoice ? "primary" : "success")">
                                    @(test.Type == TestType.MultipleChoice ? "MCQ" : "Coding")
                                </span>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-3">@test.Description</p>
                            <div class="mb-3">
                                <small class="text-muted">
                                    <i class="fas fa-clock me-1"></i> @test.DurationMinutes minutes
                                </small>
                                <small class="text-muted ms-3">
                                    <i class="fas fa-users me-1"></i> @test.MaxStudents students
                                </small>
                                <small class="text-muted ms-3">
                                    <i class="fas fa-redo me-1"></i> @test.MaxAttempts attempts
                                </small>
                            </div>
                            <div class="d-flex gap-2">
                                @if (userRole == "Candidate")
                                {
                                    <a href="/Test/Take/@test.Id" class="btn btn-primary btn-sm flex-grow-1">
                                        <i class="fas fa-play me-1"></i> Start Test
                                    </a>
                                }
                                else if (isAdmin || userRole == "Organization")
                                {
                                    <a href="/Test/Take/@test.Id" class="btn btn-primary btn-sm">
                                        <i class="fas fa-play me-1"></i> Start
                                    </a>
                                    <a href="/Test/Share/@test.Id" class="btn btn-info btn-sm">
                                        <i class="fas fa-share-alt me-1"></i> Share
                                    </a>
                                    @if (isAdmin)
                                    {
                                        <button class="btn btn-danger btn-sm" onclick="deleteTest(@test.Id)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-secondary btn-sm flex-grow-1" disabled title="Please login to take the test">
                                        <i class="fas fa-lock me-1"></i> Login Required
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="card-footer bg-white">
                            <small class="text-muted">
                                <i class="fas fa-calendar-alt me-1"></i> Created @test.CreatedAt.ToString("MMM dd, yyyy")
                            </small>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info shadow-sm">
                    <i class="fas fa-info-circle me-2"></i>
                    No tests available at the moment.
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('createTestForm')?.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                // Get the form values
                const title = document.getElementById('testTitle').value.trim();
                const description = document.getElementById('testDescription').value.trim();
                const durationMinutes = parseInt(document.getElementById('durationMinutes').value);
                const maxStudents = parseInt(document.getElementById('maxStudents').value);
                const maxAttempts = parseInt(document.getElementById('maxAttempts').value);
                const typeElement = document.getElementById('testType');
                const type = parseInt(typeElement.value);
                
                console.log('Test type element:', typeElement);
                console.log('Test type raw value:', typeElement.value);
                console.log('Test type parsed value:', type);
                
                // Validate form values
                if (!title) {
                    throw new Error('Test title is required');
                }
                if (!description) {
                    throw new Error('Test description is required');
                }
                if (isNaN(durationMinutes) || durationMinutes <= 0 || durationMinutes > 1440) {
                    throw new Error('Duration must be between 1 and 1440 minutes');
                }
                if (isNaN(maxStudents) || maxStudents < 1) {
                    throw new Error('Maximum number of students must be at least 1');
                }
                if (isNaN(maxAttempts) || maxAttempts < 1) {
                    throw new Error('Maximum number of attempts must be at least 1');
                }
                if (isNaN(type)) {
                    throw new Error('Invalid test type');
                }
                
                // Create the test object
                const test = {
                    Title: title,
                    Description: description,
                    DurationMinutes: durationMinutes,
                    MaxStudents: maxStudents,
                    MaxAttempts: maxAttempts,
                    Type: type,
                    Questions: []
                };
                
                console.log('Sending test data:', test);
                console.log('Test type value:', type);
                console.log('Test type as string:', type.toString());

                const response = await fetch('/api/TestApi/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(test)
                });
                
                const result = await response.json();
                console.log('Server response:', result);
                
                if (!response.ok) {
                    throw new Error(result.message || 'Server error: ' + response.status);
                }
                
                showToast('Test created successfully!', 'success');
                window.location.href = result.redirectUrl || '/Test/Index';
            } catch (error) {
                console.error('Error:', error);
                console.error('Error details:', error.stack);
                showToast('Error creating test: ' + error.message, 'error');
            }
        });

        document.getElementById('uploadQuestionsForm')?.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                const formData = new FormData();
                const fileInput = document.getElementById('jsonFile');
                const testId = document.getElementById('testSelect').value;
                const questionType = document.getElementById('questionType').value;
                
                if (!fileInput.files || fileInput.files.length === 0) {
                    throw new Error('Please select a file to upload');
                }
                
                if (!testId) {
                    throw new Error('Please select a test');
                }
                
                formData.append('file', fileInput.files[0]);
                formData.append('testId', testId);
                
                const uploadStatus = document.getElementById('uploadStatus');
                uploadStatus.className = 'alert mt-3 alert-info';
                uploadStatus.textContent = 'Uploading...';
                uploadStatus.classList.remove('d-none');
                
                let endpoint = '/Test/upload-questions';
                if (questionType === 'coding') {
                    endpoint = '/Test/upload-coding-questions';
                }
                
                const response = await fetch(endpoint, {
                    method: 'POST',
                    body: formData
                });
                
                // Check if the response is OK before trying to parse JSON
                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }
                
                // Try to parse the JSON response
                let result;
                try {
                    const text = await response.text();
                    if (!text) {
                        throw new Error('Empty response from server');
                    }
                    result = JSON.parse(text);
                } catch (parseError) {
                    console.error('Error parsing JSON:', parseError);
                    throw new Error('Invalid response from server: ' + parseError.message);
                }
                
                if (result.success) {
                    uploadStatus.className = 'alert mt-3 alert-success';
                    uploadStatus.textContent = result.message || 'Questions uploaded successfully!';
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    uploadStatus.className = 'alert mt-3 alert-danger';
                    uploadStatus.textContent = result.message || 'Error uploading questions';
                }
            } catch (error) {
                console.error('Error:', error);
                console.error('Error details:', error.stack);
                const uploadStatus = document.getElementById('uploadStatus');
                uploadStatus.className = 'alert mt-3 alert-danger';
                uploadStatus.textContent = 'Error: ' + error.message;
                uploadStatus.classList.remove('d-none');
            }
        });

        async function deleteTest(testId) {
            try {
                // Create a Bootstrap modal for confirmation
                const confirmModal = document.createElement('div');
                confirmModal.className = 'modal fade';
                confirmModal.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Deletion</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete this test? This action cannot be undone.</p>
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>Warning:</strong> This will permanently delete the test and all its questions.
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" id="confirmDelete">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(confirmModal);
                const modal = new bootstrap.Modal(confirmModal);
                modal.show();

                confirmModal.querySelector('#confirmDelete').addEventListener('click', async function() {
                    const deleteButton = this;
                    deleteButton.disabled = true;
                    deleteButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...';

                    try {
                        const response = await fetch(`/Test/delete/${testId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        const result = await response.json();
                        
                        if (result.success) {
                            showToast('Test deleted successfully!', 'success');
                            // Remove the test card from the page with animation
                            const testCard = document.querySelector(`div[data-test-id="${testId}"]`);
                            if (testCard) {
                                testCard.style.transition = 'all 0.3s ease';
                                testCard.style.opacity = '0';
                                setTimeout(() => {
                                    testCard.remove();
                                    // Check if there are no more tests
                                    const remainingTests = document.querySelectorAll('div[data-test-id]');
                                    if (remainingTests.length === 0) {
                                        location.reload(); // Reload to show "No tests available" message
                                    }
                                }, 300);
                            }
                        } else {
                            showToast(result.message || 'Error deleting test', 'error');
                            deleteButton.disabled = false;
                            deleteButton.innerHTML = '<i class="fas fa-trash"></i> Delete';
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showToast('An error occurred while deleting the test. Please try again.', 'error');
                        deleteButton.disabled = false;
                        deleteButton.innerHTML = '<i class="fas fa-trash"></i> Delete';
                    } finally {
                        modal.hide();
                    }
                });

                confirmModal.addEventListener('hidden.bs.modal', function () {
                    document.body.removeChild(confirmModal);
                });
            } catch (error) {
                console.error('Error:', error);
                showToast('An unexpected error occurred. Please try again.', 'error');
            }
        }
    </script>
} 