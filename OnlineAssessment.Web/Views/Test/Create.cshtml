@model OnlineAssessment.Web.Models.Test

@{
    ViewData["Title"] = "Create Test";
}

@section Styles {
    <style>
        :root {
            --primary-color: #2563eb;
            --primary-hover: #1d4ed8;
            --success-color: #22c55e;
            --info-color: #3b82f6;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-bg: #1e1e1e;
            --light-bg: #f8fafc;
            --border-color: #e2e8f0;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --card-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --hover-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }

        body {
            background-color: var(--light-bg);
            color: var(--text-primary);
        }

        .container {
            max-width: 1000px;
            padding: 2rem;
        }

        .page-header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            padding: 2rem;
            border-radius: 1rem;
            margin-bottom: 2rem;
            box-shadow: var(--card-shadow);
        }

        .page-header h3 {
            font-size: 1.75rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .page-header p {
            opacity: 0.9;
            margin-bottom: 0;
        }

        .form-card {
            border: none;
            border-radius: 1rem;
            overflow: hidden;
            background-color: white;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
        }

        .form-card:hover {
            box-shadow: var(--hover-shadow);
        }

        .form-card .card-header {
            background: white;
            border-bottom: 1px solid var(--border-color);
            padding: 1.5rem;
        }

        .form-card .card-header h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .form-card .card-body {
            padding: 2rem;
        }

        .form-label {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .form-control, .form-select {
            border: 1px solid var(--border-color);
            border-radius: 0.75rem;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .input-group-text {
            background-color: var(--light-bg);
            border: 1px solid var(--border-color);
            color: var(--text-secondary);
            border-radius: 0 0.75rem 0.75rem 0;
        }

        .input-group .form-control {
            border-radius: 0.75rem 0 0 0.75rem;
        }

        .form-text {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            border: none;
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(37, 99, 235, 0.3);
        }

        .btn-outline-primary {
            border: 1px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .btn-outline-secondary {
            border: 1px solid var(--text-secondary);
            color: var(--text-secondary);
        }

        .btn-outline-secondary:hover {
            background-color: var(--text-secondary);
            color: white;
            transform: translateY(-2px);
        }

        .btn-lg {
            padding: 1rem 2rem;
            font-size: 1.125rem;
        }

        .question-card {
            border: none;
            border-radius: 1rem;
            overflow: hidden;
            background-color: white;
            box-shadow: var(--card-shadow);
            margin-top: 1.5rem;
        }

        .question-card .card-header {
            background: var(--light-bg);
            border-bottom: 1px solid var(--border-color);
            padding: 1.25rem;
        }

        .question-card .card-header h5 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }

        .question-card .card-body {
            padding: 1.5rem;
        }

        .alert {
            border: none;
            border-radius: 0.75rem;
            padding: 1rem 1.25rem;
            margin-top: 1rem;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #166534;
        }

        .alert-danger {
            background-color: #fee2e2;
            color: #991b1b;
        }

        .alert-warning {
            background-color: #fef3c7;
            color: #92400e;
        }

        .alert-info {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .form-check {
            margin-bottom: 1rem;
        }

        .form-check-input {
            width: 1.25rem;
            height: 1.25rem;
            margin-top: 0.2rem;
            border: 1px solid var(--border-color);
        }

        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .form-check-label {
            padding-left: 0.5rem;
            font-size: 1rem;
            color: var(--text-primary);
        }

        .invalid-feedback {
            color: var(--danger-color);
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .was-validated .form-control:invalid, .was-validated .form-select:invalid {
            border-color: var(--danger-color);
        }

        .was-validated .form-control:valid, .was-validated .form-select:valid {
            border-color: var(--success-color);
        }

        .file-upload-wrapper {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .file-upload-input {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-upload-label {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
            background-color: var(--light-bg);
            border: 2px dashed var(--border-color);
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .file-upload-label:hover {
            border-color: var(--primary-color);
            background-color: rgba(37, 99, 235, 0.05);
        }

        .file-upload-icon {
            font-size: 2rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .file-upload-text {
            text-align: center;
        }

        .file-upload-text h5 {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .file-upload-text p {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: 0;
        }

        .file-name {
            margin-top: 0.5rem;
            font-size: 0.875rem;
            color: var(--primary-color);
            font-weight: 500;
        }

        @@media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .page-header {
                padding: 1.5rem;
            }

            .form-card .card-body {
                padding: 1.5rem;
            }
        }
    </style>
}

<div class="container">
    <div class="page-header">
        <h3><i class="fas fa-plus-circle"></i> Create New Test</h3>
        <p>Fill in the details below to create a new test for your students</p>
    </div>

    <div class="form-card">
        <div class="card-header">
            <h3><i class="fas fa-edit"></i> Test Details</h3>
        </div>
        <div class="card-body">
            <form id="createTestForm" class="needs-validation" novalidate>
                <div class="form-group mb-4">
                    <label for="title" class="form-label">Test Title</label>
                    <input type="text" class="form-control" id="title" name="title" required 
                        placeholder="Enter a descriptive title for your test">
                    <div class="invalid-feedback">Please provide a test title.</div>
                </div>
                
                <div class="form-group mb-4">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="4" 
                        placeholder="Provide a detailed description of the test"></textarea>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group mb-4">
                            <label for="duration" class="form-label">Duration (minutes)</label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="duration" name="durationMinutes" 
                                    min="1" max="1440" required>
                                <span class="input-group-text">min</span>
                            </div>
                            <div class="invalid-feedback">Duration must be between 1 and 1440 minutes.</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group mb-4">
                            <label for="maxStudents" class="form-label">Maximum Students</label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="maxStudents" name="maxStudents" 
                                    min="1" value="100" required>
                                <span class="input-group-text">students</span>
                            </div>
                            <small class="form-text">Maximum number of students that can take this test</small>
                        </div>
                    </div>
                </div>

                <div class="form-group mb-4">
                    <label for="maxAttempts" class="form-label">Attempts per Student</label>
                    <div class="input-group">
                        <input type="number" class="form-control" id="maxAttempts" name="maxAttempts" 
                            min="1" value="1" required>
                        <span class="input-group-text">attempts</span>
                    </div>
                    <small class="form-text">Number of times each student can attempt this test</small>
                </div>

                <div class="form-group mb-4">
                    <label for="testType" class="form-label">Test Type</label>
                    <select class="form-select" id="testType" name="type" required>
                        @if (ViewBag.CanCreateMcq ?? false)
                        {
                            <option value="0">Multiple Choice Questions</option>
                        }
                        @if (ViewBag.CanCreateCoding ?? false)
                        {
                            <option value="1">Coding Test</option>
                        }
                    </select>
                    <div class="invalid-feedback">Please select a test type.</div>
                </div>

                <div id="questionSection" class="mb-4" style="display: none;">
                    <div class="question-card">
                        <div class="card-header">
                            <h5><i class="fas fa-question-circle"></i> Add Questions</h5>
                        </div>
                        <div class="card-body">
                            <div id="mcqQuestions" style="display: none;">
                                <div class="file-upload-wrapper">
                                    <div class="file-upload-label">
                                        <div class="file-upload-text">
                                            <div class="file-upload-icon">
                                                <i class="fas fa-file-upload"></i>
                                            </div>
                                            <h5>Upload MCQ Questions</h5>
                                            <p>Drag and drop your JSON file here or click to browse</p>
                                            <div class="file-name" id="mcqFileName"></div>
                                        </div>
                                    </div>
                                    <input type="file" class="file-upload-input" id="mcqFile" accept=".json">
                                </div>
                                <div class="d-flex justify-content-end">
                                    <button class="btn btn-primary" type="button" onclick="uploadMcqQuestions()">
                                        <i class="fas fa-upload"></i> Upload MCQ
                                    </button>
                                </div>
                                <div id="mcqUploadStatus" class="alert mt-3 d-none"></div>
                            </div>

                            <div id="codingQuestions" style="display: none;">
                                <div class="file-upload-wrapper">
                                    <div class="file-upload-label">
                                        <div class="file-upload-text">
                                            <div class="file-upload-icon">
                                                <i class="fas fa-file-upload"></i>
                                            </div>
                                            <h5>Upload Coding Questions</h5>
                                            <p>Drag and drop your JSON file here or click to browse</p>
                                            <div class="file-name" id="codingFileName"></div>
                                        </div>
                                    </div>
                                    <input type="file" class="file-upload-input" id="codingFile" accept=".json">
                                </div>
                                <div class="d-flex justify-content-end">
                                    <button class="btn btn-primary" type="button" onclick="uploadCodingQuestions()">
                                        <i class="fas fa-upload"></i> Upload Coding
                                    </button>
                                </div>
                                <div id="codingUploadStatus" class="alert mt-3 d-none"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-grid gap-3 mt-5">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="fas fa-save"></i> Create Test
                    </button>
                    <a href="/Test" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i> Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let createdTestId = null;

        // Show/hide question sections based on test type
        document.getElementById('testType').addEventListener('change', function() {
            const type = parseInt(this.value);
            const questionSection = document.getElementById('questionSection');
            const mcqQuestions = document.getElementById('mcqQuestions');
            const codingQuestions = document.getElementById('codingQuestions');

            questionSection.style.display = 'block';
            mcqQuestions.style.display = type === 0 ? 'block' : 'none';
            codingQuestions.style.display = type === 1 ? 'block' : 'none';
        });

        // File upload display
        document.getElementById('mcqFile').addEventListener('change', function() {
            const fileName = this.files[0]?.name || 'No file selected';
            document.getElementById('mcqFileName').textContent = fileName;
        });

        document.getElementById('codingFile').addEventListener('change', function() {
            const fileName = this.files[0]?.name || 'No file selected';
            document.getElementById('codingFileName').textContent = fileName;
        });

        // Form validation
        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()

        // Handle form submission
        document.getElementById('createTestForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                // Get the form values
                const title = document.getElementById('title').value.trim();
                const description = document.getElementById('description').value.trim();
                const durationMinutes = parseInt(document.getElementById('duration').value);
                const maxStudents = parseInt(document.getElementById('maxStudents').value);
                const maxAttempts = parseInt(document.getElementById('maxAttempts').value);
                const type = parseInt(document.getElementById('testType').value);
                
                // Validate form values
                if (!title) {
                    throw new Error('Test title is required');
                }
                if (isNaN(durationMinutes) || durationMinutes <= 0 || durationMinutes > 1440) {
                    throw new Error('Duration must be between 1 and 1440 minutes');
                }
                if (isNaN(maxStudents) || maxStudents < 1) {
                    throw new Error('Maximum number of students must be at least 1');
                }
                if (isNaN(maxAttempts) || maxAttempts < 1) {
                    throw new Error('Maximum number of attempts must be at least 1');
                }
                if (isNaN(type)) {
                    throw new Error('Invalid test type');
                }
                
                // Create the test object
                const test = {
                    Title: title,
                    Description: description,
                    DurationMinutes: durationMinutes,
                    MaxStudents: maxStudents,
                    MaxAttempts: maxAttempts,
                    Type: type
                };
                
                console.log('Sending test data:', test);

                const response = await fetch('/api/TestApi/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(test)
                });
                
                const result = await response.json();
                console.log('Server response:', result);
                
                if (!response.ok) {
                    throw new Error(result.message || 'Server error: ' + response.status);
                }

                createdTestId = result.test.id;
                showToast('Test created successfully! You can now upload questions.', 'success');
                
                // Show the question section after test creation
                const questionSection = document.getElementById('questionSection');
                const mcqQuestions = document.getElementById('mcqQuestions');
                const codingQuestions = document.getElementById('codingQuestions');

                questionSection.style.display = 'block';
                mcqQuestions.style.display = type === 0 ? 'block' : 'none';
                codingQuestions.style.display = type === 1 ? 'block' : 'none';

            } catch (error) {
                console.error('Error:', error);
                showToast('Error creating test: ' + error.message, 'error');
            }
        });

        // Upload MCQ questions
        async function uploadMcqQuestions() {
            if (!createdTestId) {
                showToast('Please create the test first', 'warning');
                return;
            }

            const fileInput = document.getElementById('mcqFile');
            const file = fileInput.files[0];
            const statusElement = document.getElementById('mcqUploadStatus');
            
            if (!file) {
                showToast('Please select a file to upload', 'warning');
                return;
            }

            try {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('testId', createdTestId);

                statusElement.className = 'alert mt-3 alert-info';
                statusElement.textContent = 'Uploading...';
                statusElement.classList.remove('d-none');

                const response = await fetch('/Test/upload-questions', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }

                let result;
                try {
                    const text = await response.text();
                    if (!text) {
                        throw new Error('Empty response from server');
                    }
                    result = JSON.parse(text);
                } catch (parseError) {
                    console.error('Error parsing JSON:', parseError);
                    throw new Error('Invalid response from server: ' + parseError.message);
                }

                if (result.success) {
                    statusElement.className = 'alert mt-3 alert-success';
                    statusElement.textContent = result.message || 'Questions uploaded successfully!';
                    setTimeout(() => {
                        window.location.href = '/Test';
                    }, 2000);
                } else {
                    statusElement.className = 'alert mt-3 alert-danger';
                    statusElement.textContent = result.message || 'Error uploading questions';
                }
            } catch (error) {
                console.error('Error:', error);
                statusElement.className = 'alert mt-3 alert-danger';
                statusElement.textContent = 'Error: ' + error.message;
                statusElement.classList.remove('d-none');
            }
        }

        // Upload Coding questions
        async function uploadCodingQuestions() {
            if (!createdTestId) {
                showToast('Please create the test first', 'warning');
                return;
            }

            const fileInput = document.getElementById('codingFile');
            const file = fileInput.files[0];
            const statusElement = document.getElementById('codingUploadStatus');
            
            if (!file) {
                showToast('Please select a file to upload', 'warning');
                return;
            }

            try {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('testId', createdTestId);

                statusElement.className = 'alert mt-3 alert-info';
                statusElement.textContent = 'Uploading...';
                statusElement.classList.remove('d-none');

                const response = await fetch('/Test/upload-coding-questions', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }

                let result;
                try {
                    const text = await response.text();
                    if (!text) {
                        throw new Error('Empty response from server');
                    }
                    result = JSON.parse(text);
                } catch (parseError) {
                    console.error('Error parsing JSON:', parseError);
                    throw new Error('Invalid response from server: ' + parseError.message);
                }

                if (result.success) {
                    statusElement.className = 'alert mt-3 alert-success';
                    statusElement.textContent = result.message || 'Questions uploaded successfully!';
                    setTimeout(() => {
                        window.location.href = '/Test';
                    }, 2000);
                } else {
                    statusElement.className = 'alert mt-3 alert-danger';
                    statusElement.textContent = result.message || 'Error uploading questions';
                }
            } catch (error) {
                console.error('Error:', error);
                statusElement.className = 'alert mt-3 alert-danger';
                statusElement.textContent = 'Error: ' + error.message;
                statusElement.classList.remove('d-none');
            }
        }
    </script>
} 