@model OnlineAssessment.Web.Models.Test

@{
    ViewData["Title"] = "Take Test";
    var totalQuestions = Model.Questions.Count;
    var mcqQuestions = Model.Questions.Where(q => q.Type == QuestionType.MultipleChoice).ToList();
    var codingQuestions = Model.Questions.Where(q => q.Type == QuestionType.ShortAnswer).ToList();
}

@section Styles {
    <style>
        :root {
            --primary-color: #10b981;
            --primary-hover: #059669;
            --primary-light: #d1fae5;
            --background-color: #f9fafb;
            --card-bg: #ffffff;
            --border-color: #e5e7eb;
            --text-primary: #1f2937;
            --text-secondary: #4b5563;
            --text-muted: #9ca3af;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-primary);
        }

        /* Test Header */
        .test-header {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            background-color: white;
            border-bottom: 1px solid var(--border-color);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }

        .header-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-left: 10px;
        }

        .back-button {
            color: var(--text-primary);
            text-decoration: none;
            display: flex;
            align-items: center;
        }

        /* Main Container */
        .test-container {
            display: flex;
            height: calc(100vh - 60px);
        }

        /* Sidebar */
        .test-sidebar {
            width: 250px;
            background-color: white;
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }

        .sidebar-section {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .sidebar-section-title {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-secondary);
            margin-bottom: 10px;
        }

        /* Timer */
        .timer-container {
            text-align: center;
        }

        .timer-display {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 5px;
        }

        .timer-label {
            font-size: 0.75rem;
            color: var(--text-secondary);
        }

        /* Question Navigation */
        .questions-nav {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 8px;
        }

        .question-button {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 6px;
            background-color: white;
            border: 1px solid var(--border-color);
            font-size: 0.875rem;
            color: var(--text-primary);
            cursor: pointer;
            transition: all 0.2s;
        }

        .question-button:hover {
            border-color: var(--primary-color);
        }

        .question-button.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .question-button.answered {
            background-color: var(--primary-light);
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        /* Main Content */
        .test-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }

        .question-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .question-navigation {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .nav-button {
            display: flex;
            align-items: center;
            padding: 8px 16px;
            background-color: white;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 0.875rem;
            color: var(--text-primary);
            cursor: pointer;
            transition: all 0.2s;
        }

        .nav-button:hover {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .nav-button i {
            margin-right: 8px;
        }

        .nav-button i.right {
            margin-right: 0;
            margin-left: 8px;
        }

        /* Question */
        .question-card {
            background-color: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .question-number {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: 20px;
        }

        .question-text {
            font-size: 1.125rem;
            margin-bottom: 30px;
            line-height: 1.6;
        }

        /* Options */
        .option-container {
            margin-bottom: 12px;
        }

        .option-label {
            display: flex;
            padding: 12px 16px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .option-label:hover {
            border-color: var(--primary-color);
        }

        .option-label.selected {
            background-color: var(--primary-light);
            border-color: var(--primary-color);
        }

        .option-radio {
            margin-right: 12px;
        }

        /* Submit Button */
        .submit-container {
            text-align: center;
            margin-top: 30px;
        }

        .submit-button {
            padding: 10px 24px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .submit-button:hover {
            background-color: var(--primary-hover);
        }
    </style>
}

<div class="test-header">
    <a href="@Url.Action("Index", "Test")" class="back-button">
        <i class="fas fa-arrow-left"></i>
    </a>
    <span class="header-title">@Model.Title</span>
</div>

<div class="test-container">
    <div class="test-sidebar">
        <div class="sidebar-section">
            <div class="timer-container">
                <div id="timer" class="timer-display">00:15:30</div>
                <div class="timer-label">Time Remaining</div>
            </div>
        </div>
        
        <div class="sidebar-section">
            <div class="sidebar-section-title">Questions</div>
            <div class="questions-nav">
                @for (int i = 1; i <= totalQuestions; i++)
                {
                    <button type="button" class="question-button @(i == 1 ? "active" : "")" data-question-index="@(i-1)">@i</button>
                }
            </div>
        </div>
    </div>
    
    <div class="test-content">
        <form id="testForm">
            @Html.AntiForgeryToken()
            
            <div id="questionsContainer" class="question-container">
                @for (int i = 0; i < mcqQuestions.Count; i++)
                {
                    var question = mcqQuestions[i];
                    <div class="question-content @(i == 0 ? "" : "d-none")" data-question-id="@question.Id" data-question-index="@i">
                        <div class="question-navigation">
                            @if (i > 0)
                            {
                                <button type="button" class="nav-button prev-question">
                                    <i class="fas fa-arrow-left"></i> Previous
                                </button>
                            }
                            else
                            {
                                <div></div>
                            }
                            
                            @if (i < mcqQuestions.Count - 1)
                            {
                                <button type="button" class="nav-button next-question">
                                    Next <i class="fas fa-arrow-right right"></i>
                                </button>
                            }
                            else
                            {
                                <button type="submit" class="submit-button">
                                    Submit Answers
                                </button>
                            }
                        </div>
                        
                        <div class="question-card">
                            <div class="question-number">Question @(i + 1)</div>
                            <div class="question-text">@question.Text</div>
                            
                            <div class="options-container">
                                @foreach (var option in question.AnswerOptions)
                                {
                                    <div class="option-container">
                                        <label class="option-label" for="option_@option.Id">
                                            <input class="option-radio" type="radio" 
                                                   name="question_@question.Id" 
                                                   value="@option.Id" 
                                                   id="option_@option.Id">
                                            @option.Text
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const testForm = document.getElementById('testForm');
            const timerElement = document.getElementById('timer');
            const questionButtons = document.querySelectorAll('.question-button');
            const questionContents = document.querySelectorAll('.question-content');
            
            let timeLeft = @Model.DurationMinutes * 60; // Convert minutes to seconds
            
            // Initialize timer
            updateTimer();
            const timerInterval = setInterval(updateTimer, 1000);
            
            // Timer function
            function updateTimer() {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    submitTest();
                    return;
                }
                
                const hours = Math.floor(timeLeft / 3600);
                const minutes = Math.floor((timeLeft % 3600) / 60);
                const seconds = timeLeft % 60;
                
                timerElement.textContent = 
                    `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                // Add warning class when less than 5 minutes remaining
                if (timeLeft <= 300) {
                    timerElement.classList.add('text-danger');
                }
                
                timeLeft--;
            }
            
            // Handle question navigation
            questionButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const questionIndex = parseInt(this.getAttribute('data-question-index'));
                    showQuestion(questionIndex);
                });
            });
            
            function showQuestion(index) {
                // Hide all questions
                questionContents.forEach(content => {
                    content.classList.add('d-none');
                });
                
                // Show selected question
                questionContents[index].classList.remove('d-none');
                
                // Update active button
                questionButtons.forEach(btn => {
                    btn.classList.remove('active');
                });
                questionButtons[index].classList.add('active');
            }
            
            // Handle prev/next buttons
            document.querySelectorAll('.next-question').forEach(button => {
                button.addEventListener('click', function() {
                    const currentQuestion = document.querySelector('.question-content:not(.d-none)');
                    const currentIndex = parseInt(currentQuestion.getAttribute('data-question-index'));
                    showQuestion(currentIndex + 1);
                });
            });
            
            document.querySelectorAll('.prev-question').forEach(button => {
                button.addEventListener('click', function() {
                    const currentQuestion = document.querySelector('.question-content:not(.d-none)');
                    const currentIndex = parseInt(currentQuestion.getAttribute('data-question-index'));
                    showQuestion(currentIndex - 1);
                });
            });
            
            // Mark questions as answered when an option is selected
            document.querySelectorAll('input[type="radio"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    const questionContent = this.closest('.question-content');
                    const questionIndex = parseInt(questionContent.getAttribute('data-question-index'));
                    questionButtons[questionIndex].classList.add('answered');
                    
                    // Mark label as selected
                    const labels = questionContent.querySelectorAll('.option-label');
                    labels.forEach(label => {
                        label.classList.remove('selected');
                    });
                    this.closest('.option-label').classList.add('selected');
                });
            });
            
            // Handle form submission
            testForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Create a Bootstrap modal for confirmation
                const confirmModal = document.createElement('div');
                confirmModal.className = 'modal fade';
                confirmModal.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Submission</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to submit the test? You cannot change your answers after submission.</p>
                                <p class="text-warning">Note: You can submit the test even if you haven't answered all questions.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" id="confirmSubmit">Submit</button>
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(confirmModal);
                const modal = new bootstrap.Modal(confirmModal);
                modal.show();
                
                confirmModal.querySelector('#confirmSubmit').addEventListener('click', function() {
                    modal.hide();
                    
                    // Collect all answers
                    const answers = {};
                    
                    // Collect MCQ answers
                    const mcqInputs = document.querySelectorAll('input[name^="question_"]');
                    mcqInputs.forEach(input => {
                        if (input.checked) {
                            answers[input.name] = input.value;
                        }
                    });
                    
                    // Get the anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    if (!token) {
                        showToast('Security token not found. Please refresh the page and try again.', 'error');
                        return;
                    }
                    
                    // Submit the test
                    fetch(`/Test/Submit/${@Model.Id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(answers)
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(data => {
                                throw new Error(data.message || 'Error submitting test');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            showToast('Test submitted successfully!', 'success');
                            window.location.href = data.redirectUrl;
                        } else {
                            showToast('Failed to submit test: ' + (data.message || 'Unknown error'), 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error submitting test:', error);
                        showToast('Error submitting test: ' + error.message, 'error');
                    });
                });
                
                confirmModal.addEventListener('hidden.bs.modal', function () {
                    document.body.removeChild(confirmModal);
                });
            });
            
            function submitTest() {
                // Show submission message
                const submitMessage = document.createElement('div');
                submitMessage.className = 'alert alert-info alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3';
                submitMessage.style.zIndex = '9999';
                submitMessage.innerHTML = `
                    <strong>Time's up!</strong> Your test is being submitted automatically.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                document.body.appendChild(submitMessage);
                
                // Submit the form
                testForm.dispatchEvent(new Event('submit'));
            }
            
            // Helper functions for toast notifications
            function showToast(message, type = 'info') {
                const toast = document.createElement('div');
                toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} position-fixed end-0 m-3`;
                toast.style.top = '70px'; // Position below navbar
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
                document.body.appendChild(toast);
                
                const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
                bsToast.show();
                
                toast.addEventListener('hidden.bs.toast', function() {
                    document.body.removeChild(toast);
                });
            }
        });
    </script>
} 